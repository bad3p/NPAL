//
// POLYGONAL AREA LIGHTS
// The MIT License (MIT)
// Copyright (c) 2016 ALEXANDER PETRYAEV
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal 
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software is furnished 
// to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#define GROUPSIZE 128

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel MarchingSquares

RWStructuredBuffer<int> polygonMap;
RWStructuredBuffer<uint> contourMap;

int    numPolygons;
float4 polygonIndices0123; // because ComputeShader.SetInts() isn't working
float4 polygonIndices4567; // this is the same workaround

int bufferWidth;
int bufferHeight;

[numthreads(GROUPSIZE,1,1)]
void MarchingSquares(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	uint x = i % (bufferWidth-1);
	uint y = i / (bufferWidth-1);

	int polygonIndex0 = polygonMap[(y+1)*bufferWidth+x];
	int polygonIndex1 = polygonMap[(y+1)*bufferWidth+(x+1)];
	int polygonIndex2 = polygonMap[y*bufferWidth+(x+1)];
	int polygonIndex3 = polygonMap[y*bufferWidth+x];

	uint contourValue = 0;

	[loop]
	for( int j=0; j<numPolygons; j++ )
	{
		int polygonIndex = 0;
		switch( j )
		{
		case 0: polygonIndex = polygonIndices0123.x; break;
		case 1: polygonIndex = polygonIndices0123.y; break;
		case 2: polygonIndex = polygonIndices0123.z; break;
		case 3: polygonIndex = polygonIndices0123.w; break;
		case 4: polygonIndex = polygonIndices4567.x; break;
		case 5: polygonIndex = polygonIndices4567.y; break;
		case 6: polygonIndex = polygonIndices4567.z; break;
		case 7: polygonIndex = polygonIndices4567.w; break;
		}

		uint lookupIndex = 0;
		if( polygonIndex0 == polygonIndex )
		{
			lookupIndex = lookupIndex | 8;
		}
		if( polygonIndex1 == polygonIndex )
		{
			lookupIndex = lookupIndex | 4;
		}
		if( polygonIndex2 == polygonIndex )
		{
			lookupIndex = lookupIndex | 2;
		}
		if( polygonIndex3 == polygonIndex )
		{
			lookupIndex = lookupIndex | 1;
		}
		lookupIndex = lookupIndex << (j*4);
		contourValue = contourValue | lookupIndex;
	}

	contourMap[i] = contourValue; 
}

//////////////////////////////////////////////////////////////////////////////////////

struct BatchVertex
{
	uint   flag;
	uint   prevIndex;
	uint   nextIndex;
	float2 position;
	float2 edge;
	float  edgeLength;
	float  tripletArea;
};

struct BatchPolygon
{
	uint   startVertexIndex;
	uint   endVertexIndex;
	uint   numVertices;
	float3 planePosition;
	float3 planeNormal;
	float3 planeTangent;
	float3 planeBitangent;
};

RWStructuredBuffer<BatchVertex> batchVertexBuffer;
RWStructuredBuffer<BatchPolygon> batchPolygonBuffer;

int numBatchVertices;
int numBatchPolygons;
float redundantEdgeCosineAngle;
int minVertices;

float4 lowerLeftViewportPoint;
float4 upperLeftViewportPoint;
float4 lowerRightViewportPoint;
float4 upperRightViewportPoint;

float4 lowerLeftRayOrigin;
float4 lowerLeftRayDirection;
float4 upperLeftRayOrigin;
float4 upperLeftRayDirection;
float4 lowerRightRayOrigin;
float4 lowerRightRayDirection;
float4 upperRightRayOrigin;
float4 upperRightRayDirection;

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel ProcessPolygons

float TriangleAreaTimesTwo2D(float2 a, float2 b, float2 c)
{
	return ( b.x - a.x ) * ( c.y - a.y ) - ( b.y - a.y ) * ( c.x - a.x );
}

float3 BarycentricCoords2D(float2 a, float2 b, float2 c, float2 p)
{
	float invTriArea = 1.0 / TriangleAreaTimesTwo2D( a, b, c );
	float u = TriangleAreaTimesTwo2D( b, c, p ) * invTriArea;
	float v = TriangleAreaTimesTwo2D( c, a, p ) * invTriArea;
	float w = TriangleAreaTimesTwo2D( a, b, p ) * invTriArea;
	return float3( u,v,w );
}

float TripletArea(float2 v1, float2 v2, float2 v3)
{
	return abs( 0.5 * ( -v2.x*v1.y + v3.x*v1.y + v1.x*v2.y - v3.x*v2.y - v1.x*v3.y + v2.x*v3.y ) );
}

float ClockwiseAngle(float2 v1, float2 v2)
{
	float result = atan2( v1.x*v2.y - v1.y*v2.x, v1.x*v2.x + v1.y*v2.y );
	if( result > 0 )
	{
		result = -( 3.1415926 * 2 - result );
	}
	return -result;
}

void RemoveVertex(uint polygonIndex, uint vertexIndex, bool updateEdge, bool updateTriplets)
{
	// update ajacency

	uint prevIndex = batchVertexBuffer[vertexIndex].prevIndex;
	uint nextIndex = batchVertexBuffer[vertexIndex].nextIndex;

	batchVertexBuffer[prevIndex].nextIndex = nextIndex;
	batchVertexBuffer[nextIndex].prevIndex = prevIndex;

	// update edge

	if( updateEdge )
	{
		float2 prevEdge = ( batchVertexBuffer[nextIndex].position - batchVertexBuffer[prevIndex].position );
		float prevEdgeLength = length( prevEdge );
		prevEdge *= 1.0f / prevEdgeLength;

		batchVertexBuffer[prevIndex].edge = prevEdge;
		batchVertexBuffer[prevIndex].edgeLength = prevEdgeLength;
	}

	// update triplets

	if( updateTriplets )
	{
		batchVertexBuffer[prevIndex].tripletArea = TripletArea( 
			batchVertexBuffer[batchVertexBuffer[prevIndex].prevIndex].position,
			batchVertexBuffer[prevIndex].position,
			batchVertexBuffer[nextIndex].position
		);

		batchVertexBuffer[nextIndex].tripletArea = TripletArea( 
			batchVertexBuffer[prevIndex].position,
			batchVertexBuffer[nextIndex].position,
			batchVertexBuffer[batchVertexBuffer[nextIndex].nextIndex].position
		);
	}

	// update polygon

	if( vertexIndex == batchPolygonBuffer[polygonIndex].startVertexIndex )
	{
		batchPolygonBuffer[polygonIndex].startVertexIndex = nextIndex;
	}
	else if( vertexIndex == batchPolygonBuffer[polygonIndex].endVertexIndex )
	{
		batchPolygonBuffer[polygonIndex].endVertexIndex = prevIndex;
	}

	batchPolygonBuffer[polygonIndex].numVertices--;
}

void InitializeEdges(uint polygonIndex)
{
	uint startIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;

	uint currIndex = startIndex;
	uint nextIndex = batchVertexBuffer[currIndex].nextIndex;

	[loop]
	do
	{
		float2 edge = ( batchVertexBuffer[nextIndex].position - batchVertexBuffer[currIndex].position );
		float edgeLength = length( edge );
		edge *= 1.0f / edgeLength;

		batchVertexBuffer[currIndex].edge = edge;
		batchVertexBuffer[currIndex].edgeLength = edgeLength;

		currIndex = nextIndex;
		nextIndex = batchVertexBuffer[currIndex].nextIndex;
	}
	while( currIndex != startIndex );
}

void InitializeTriplets(uint polygonIndex)
{
	uint startIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;

	uint currIndex = startIndex;
	uint prevIndex = batchVertexBuffer[currIndex].prevIndex;
	uint nextIndex = batchVertexBuffer[currIndex].nextIndex;

	[loop]
	do
	{
		batchVertexBuffer[currIndex].tripletArea = TripletArea( 
			batchVertexBuffer[prevIndex].position, 
			batchVertexBuffer[currIndex].position, 
			batchVertexBuffer[nextIndex].position
		);

		prevIndex = currIndex;
		currIndex = nextIndex;
		nextIndex = batchVertexBuffer[currIndex].nextIndex;
	}
	while( currIndex != startIndex );
}

void RemoveRedundantEdges(uint polygonIndex, float edgeAngleCosine)
{
	uint currIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;
	uint prevIndex = batchVertexBuffer[currIndex].prevIndex;
	uint nextIndex = batchVertexBuffer[currIndex].nextIndex;

	[loop]
	do
	{
		float2 prevEdge = batchVertexBuffer[prevIndex].edge;
		float2 nextEdge = batchVertexBuffer[currIndex].edge;

		if( dot( prevEdge, nextEdge ) > edgeAngleCosine )
		{
			RemoveVertex( polygonIndex, currIndex, true, false );

			currIndex = nextIndex;
			prevIndex = batchVertexBuffer[currIndex].prevIndex;
			nextIndex = batchVertexBuffer[currIndex].nextIndex;
		}
		else
		{
			prevIndex = currIndex;
			currIndex = nextIndex;
			nextIndex = batchVertexBuffer[currIndex].nextIndex;
		}
	}
	while( currIndex != batchPolygonBuffer[polygonIndex].startVertexIndex );
}

void RemoveLocalConcavity(uint polygonIndex, uint concavityType)
{
	uint currIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;
	uint prevIndex = batchVertexBuffer[currIndex].prevIndex;
	uint nextIndex = batchVertexBuffer[currIndex].nextIndex;
	uint precIndex = batchVertexBuffer[prevIndex].prevIndex;

	[loop]
	do
	{
		float2 precEdge = -batchVertexBuffer[precIndex].edge;
		float2 prevEdge = batchVertexBuffer[prevIndex].edge;
		float2 virtualEdge = ( batchVertexBuffer[nextIndex].position - batchVertexBuffer[prevIndex].position );

		float virtualEdgeLength = length( virtualEdge );
		virtualEdge *= 1.0f / virtualEdgeLength;

		// cavity
		if( ( concavityType == 0 ) && ( ClockwiseAngle( precEdge, prevEdge ) > ClockwiseAngle( precEdge, virtualEdge ) ) )
		{				
			batchVertexBuffer[currIndex].flag = 1;
		}
		// ledge
		else if( ( concavityType == 1 ) && ( ClockwiseAngle( precEdge, prevEdge ) < ClockwiseAngle( precEdge, virtualEdge ) ) )
		{
			batchVertexBuffer[currIndex].flag = 1;
		}

		precIndex = prevIndex;
		prevIndex = currIndex;
		currIndex = nextIndex;
		nextIndex = batchVertexBuffer[currIndex].nextIndex;
	}
	while( currIndex != batchPolygonBuffer[polygonIndex].startVertexIndex );

	currIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;

	[loop]
	do
	{
		if( batchVertexBuffer[currIndex].flag == 1 )
		{
			uint indexToRemove = currIndex;
			currIndex = batchVertexBuffer[currIndex].nextIndex;
			RemoveVertex( polygonIndex, indexToRemove, true, false );
		}
		else
		{
			currIndex = batchVertexBuffer[currIndex].nextIndex;
		}
	}
	while( currIndex != batchPolygonBuffer[polygonIndex].startVertexIndex );
}

void GetPolygonTripletStatistics(uint polygonIndex, out float averageTripletArea, out float lowerAverageTripletArea, out float upperAverageTripletArea)
{
	averageTripletArea = 0;
	lowerAverageTripletArea = 0;
	upperAverageTripletArea = 0;

	uint startVertexIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;
	uint vertexIndex = startVertexIndex;

	[loop]
	do
	{
		averageTripletArea += batchVertexBuffer[vertexIndex].tripletArea;
		vertexIndex = batchVertexBuffer[vertexIndex].nextIndex;
	}
	while( vertexIndex != startVertexIndex );

	if( batchPolygonBuffer[polygonIndex].numVertices > 0 )
	{
		averageTripletArea /= batchPolygonBuffer[polygonIndex].numVertices;
	}

	uint numLowerAverageTriplets = 0;
	uint numUpperAverageTriplets = 0;
	vertexIndex = startVertexIndex;

	[loop]
	do
	{
		float tripletArea = batchVertexBuffer[vertexIndex].tripletArea;

		if( tripletArea < averageTripletArea )
		{
			lowerAverageTripletArea += tripletArea;
			numLowerAverageTriplets++;
		}
		else
		{
			upperAverageTripletArea += tripletArea;
			numUpperAverageTriplets++;
		}
		vertexIndex = batchVertexBuffer[vertexIndex].nextIndex;
	}
	while( vertexIndex != startVertexIndex );

	if( numLowerAverageTriplets > 0 )
	{
		lowerAverageTripletArea /= numLowerAverageTriplets;
	}

	if( numUpperAverageTriplets > 0 )
	{
		upperAverageTripletArea /= numUpperAverageTriplets;
	}
}

void RemoveLesserTriplets(uint polygonIndex, float tripletAreaThreshold)
{
	uint currIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;
	uint nextIndex = batchVertexBuffer[currIndex].nextIndex;

	[loop]
	do
	{
		float tripletArea = batchVertexBuffer[currIndex].tripletArea;

		if( tripletArea < tripletAreaThreshold )
		{
			RemoveVertex( polygonIndex, currIndex, true, true );

			currIndex = nextIndex;
			nextIndex = batchVertexBuffer[currIndex].nextIndex;
		}
		else
		{
			currIndex = nextIndex;
			nextIndex = batchVertexBuffer[currIndex].nextIndex;
		}
	}
	while( currIndex != batchPolygonBuffer[polygonIndex].startVertexIndex );
}

float GetPolygonArea(uint polygonIndex)
{
	float polygonArea = 0.0f;

	uint startVertexIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;

	uint currIndex = startVertexIndex;
	uint prevIndex = batchVertexBuffer[currIndex].prevIndex;

	float2 v0 = batchVertexBuffer[prevIndex].position;
	float2 v1 = float2( 0,0 );

	[loop]
	do
	{
		v1 = batchVertexBuffer[currIndex].position;
		polygonArea += v0.x*v1.y - v1.x*v0.y;
		v0 = v1;

		prevIndex = currIndex;
		currIndex = batchVertexBuffer[currIndex].nextIndex;
	}
	while( currIndex != startVertexIndex );

	return -0.5f * polygonArea;
}

[numthreads(GROUPSIZE,1,1)]
void ProcessPolygons(uint3 id : SV_DispatchThreadID)
{
	uint polygonIndex = id.x;

	if( polygonIndex >= (uint)numBatchPolygons ) return;

	uint startIndex = batchPolygonBuffer[polygonIndex].startVertexIndex;
	uint index = startIndex;

	// project vertices on to polygon planes

	[loop]
	do
	{
		float3 rayOrigin;
		float3 rayDirection;

		float3 uvw = BarycentricCoords2D( upperLeftViewportPoint.xy, lowerLeftViewportPoint.xy, lowerRightViewportPoint.xy, batchVertexBuffer[index].position );
		if( uvw.x >= 0 && uvw.x <= 1 && uvw.y >= 0 && uvw.y <= 1 && uvw.z >= 0 && uvw.z <= 1 )
		{
			rayOrigin = upperLeftRayOrigin.xyz * uvw.x + lowerLeftRayOrigin.xyz * uvw.y + lowerRightRayOrigin.xyz * uvw.z;
			rayDirection = normalize( upperLeftRayDirection.xyz * uvw.x + lowerLeftRayDirection.xyz * uvw.y + lowerRightRayDirection.xyz * uvw.z );
		}
		else
		{
			uvw = BarycentricCoords2D( lowerLeftViewportPoint.xy, lowerRightViewportPoint.xy, upperRightViewportPoint.xy, batchVertexBuffer[index].position );
			rayOrigin = lowerLeftRayOrigin.xyz * uvw.x + lowerRightRayOrigin.xyz * uvw.y + upperRightRayOrigin.xyz * uvw.z;
			rayDirection = normalize( lowerLeftRayDirection.xyz * uvw.x + lowerRightRayDirection.xyz * uvw.y + upperRightRayDirection.xyz * uvw.z );
		}

		float3 w = rayOrigin - batchPolygonBuffer[polygonIndex].planePosition;
		float distance = -dot( batchPolygonBuffer[polygonIndex].planeNormal, w ) / dot( batchPolygonBuffer[polygonIndex].planeNormal, rayDirection );

		float3 worldPos = rayOrigin + rayDirection * distance;
		float3 worldOffset = worldPos - batchPolygonBuffer[polygonIndex].planePosition;
		float2 planePos = float2( dot( worldOffset, batchPolygonBuffer[polygonIndex].planeTangent ), dot( worldOffset, batchPolygonBuffer[polygonIndex].planeBitangent ) );

		batchVertexBuffer[index].position = planePos;

		index = batchVertexBuffer[index].nextIndex;
	}
	while( index != startIndex );

	InitializeEdges( polygonIndex );

	RemoveRedundantEdges( polygonIndex, redundantEdgeCosineAngle );
	if( batchPolygonBuffer[polygonIndex].numVertices <= (uint)minVertices ) return;

	RemoveLocalConcavity( polygonIndex, 0 );
	if( batchPolygonBuffer[polygonIndex].numVertices <= (uint)minVertices ) return;

	RemoveRedundantEdges( polygonIndex, redundantEdgeCosineAngle );
	if( batchPolygonBuffer[polygonIndex].numVertices <= (uint)minVertices ) return;

	InitializeTriplets( polygonIndex );

	uint prevNumVertices = batchPolygonBuffer[polygonIndex].numVertices + 1;
	float polygonReferenceArea = GetPolygonArea( polygonIndex );
	float polygonArea = polygonReferenceArea;

	[loop]
	while( prevNumVertices > batchPolygonBuffer[polygonIndex].numVertices && polygonArea > polygonReferenceArea * 0.995f )
	{
		float averageTripletArea;
		float lowerAverageTripletArea;
		float upperAverageTripletArea;

		prevNumVertices = batchPolygonBuffer[polygonIndex].numVertices;
		GetPolygonTripletStatistics( polygonIndex, averageTripletArea, lowerAverageTripletArea, upperAverageTripletArea );
		RemoveLesserTriplets( polygonIndex, lowerAverageTripletArea );
		if( batchPolygonBuffer[polygonIndex].numVertices <= (uint)minVertices ) break;

		polygonArea = GetPolygonArea( polygonIndex );
	}
}